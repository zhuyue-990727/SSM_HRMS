<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.zy.mapper.EmployeeMapper">
    <sql id="table_name">tbl_emp</sql>
    <sql id="insert_fields">emp_name, emp_email, gender, department_id</sql>
    <sql id="select_fields">
        emp_id, emp_name, emp_email, gender, department_id
    </sql>
    <sql id="select_withdept_fields">
        emp_id, emp_name, emp_email, gender, department_id, dept_id, dept_leader, dept_name
    </sql>

    <resultMap id="withDeptResultMap" type="cn.zy.bean.Employee">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="emp_email" property="empEmail"></result>
        <result column="gender" property="gender"></result>
        <result column="department_id" property="departmentId"></result>
        <association property="department" column="department_id" javaType="cn.zy.bean.Department">
            <id column="dept_id" property="deptId"></id>
            <result column="dept_leader" property="deptLeader"></result>
            <result column="dept_name" property="deptName"></result>
        </association>
    </resultMap>

    <!-- 插入 -->
    <insert id="insertOne" parameterType="cn.zy.bean.Employee">
        INSERT
        INTO
        <include refid="table_name"></include>
        VALUES
        (#{empId},#{empName},#{empEmail},#{gender},#{departmentId})
    </insert>


    <!-- 更新 -->
    <update id="updateOneById" parameterType="cn.zy.bean.Employee">
        UPDATE
        <include refid="table_name"/>
        SET
        emp_email = #{employee.empEmail, jdbcType = VARCHAR},
        gender = #{employee.gender, jdbcType = VARCHAR},
        department_id = #{employee.departmentId, jdbcType = INTEGER}
        WHERE
        emp_id = #{empId, jdbcType = INTEGER}
    </update>

    <!-- 删除 -->
    <delete id="deleteOneById" parameterType="Integer">
        DELETE
        FROM
        <include refid="table_name"></include>
        WHERE
        emp_id = #{empId}
    </delete>


    <!-- 按id查询 -->
    <select id="selectOneById" parameterType="java.lang.Integer" resultType="cn.zy.bean.Employee">
        SELECT
        emp_id empId, emp_name empName, emp_email empEmail, gender, department_id departmentId
        FROM
        <include refid="table_name"/>
        WHERE
        emp_id = #{empId}
    </select>

    <!-- 按姓名查询 -->
    <select id="selectOneByName" parameterType="String" resultType="cn.zy.bean.Employee">
        SELECT
        emp_id empId, emp_name empName, emp_email empEmail, gender, department_id departmentId
        FROM
        <include refid="table_name"/>
        WHERE
        emp_name = #{empName}
    </select>

    <!-- 查询带有部门信息的Employee -->
    <select id="selectWithDeptById" parameterType="Integer" resultMap="withDeptResultMap">
        SELECT
        <include refid="select_withdept_fields"/>
        FROM
        tbl_emp e, tbl_dept d
        WHERE
        e.department_id = d.dept_id
        AND
        e.emp_id = #{empId}
    </select>

    <!--分页查询 -->
    <!--@param limit 返回记录最大行数
     * @param offset 返回记录行的偏移量
     * @return 如offset=10，limit=5的时候，就会从数据库第11行记录开始返回5条查询结果，即范围从(offset+1)->(offset+limit) -->
    <select id="selectByLimitAndOffset" resultMap="withDeptResultMap">
        SELECT
        <include refid="select_withdept_fields"></include>
        FROM
        tbl_emp e
        LEFT JOIN
        tbl_dept d
        ON
        e.department_id = d.dept_id
        ORDER BY e.emp_id
        LIMIT #{offset}, #{limit}
    </select>

    <!--查询总记录数 -->
    <select id="countEmps" resultType="Integer">
        SELECT
        COUNT(*)
        FROM
        <include refid="table_name"></include>
    </select>

</mapper>
